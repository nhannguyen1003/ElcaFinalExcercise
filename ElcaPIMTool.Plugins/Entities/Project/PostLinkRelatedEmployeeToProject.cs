
// <copyright file="PreElcaLinkEmployeeToProject.cs" company="">
// Copyright (c) 2023 All Rights Reserved
// </copyright>
// <author></author>
// <date>7/10/2023 11:03:31 AM</date>
// <summary>Implements the PreElcaLinkEmployeeToProject Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using Microsoft.Xrm.Tooling.Connector;
using System.Configuration;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk.Client;
using ElcaPIMTool.Common.CrmEarlyBound;
using System.Linq;
using System.ServiceModel;

namespace ElcaPIMTool.Plugins
{

    /// <summary>
    /// PreElcaLinkEmployeeToProject Plugin.
    /// </summary>    
    public class PostLinkRelatedEmployeeToProject : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostLinkRelatedEmployeeToProject"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PostLinkRelatedEmployeeToProject(string unsecure, string secure)
            : base(typeof(PostLinkRelatedEmployeeToProject))
        {

            // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            var service = localContext.OrganizationService;

            var pluginExecutionContext = localContext.PluginExecutionContext;
            var primaryEntityName = pluginExecutionContext.PrimaryEntityName;
            var primaryEntityId = pluginExecutionContext.PrimaryEntityId;
            var projectEntity = new EntityReference(primaryEntityName, primaryEntityId);
            var orgService = new OrganizationServiceContext(localContext.OrganizationService);

            //get visa related to project from members field
            var relatedEntityListByVisa = getReferencesCollectionByVisa(projectEntity, localContext);
            var relationship = new Relationship(elca_Project.Relationships.elca_project_contact);
            //find entity was assosiated to project 
            var associatedList = getAssociatedRelations(projectEntity, localContext);
            var disAssociateList = new EntityReferenceCollection();

            //add entities that are no longer associated with the project to the list
            foreach (var association in associatedList)
            {
                if (!relatedEntityListByVisa.Contains(association))
                {
                    disAssociateList.Add(association);
                }
            }
            //dissassociate members from project
            if (disAssociateList.Count > 0)
            {
                service.Disassociate(primaryEntityName, primaryEntityId, relationship, disAssociateList);
            }

            //remove exist associated employee from relatedEntityListByVisa list
            EntityReferenceCollection entitiesToRemove = new EntityReferenceCollection();
            foreach (var relatedEntity in relatedEntityListByVisa)
            {
                if (associatedList.Contains(relatedEntity))
                {
                    entitiesToRemove.Add(relatedEntity);
                }
            }

            foreach (var entityToRemove in entitiesToRemove)
            {
                relatedEntityListByVisa.Remove(entityToRemove);
            }

            if (relatedEntityListByVisa.Count > 0)
            {
                //associate remain employee to project
                service.Associate(primaryEntityName, primaryEntityId, relationship, relatedEntityListByVisa);
            }
        }
        private EntityReferenceCollection getReferencesCollectionByVisa(EntityReference project, LocalPluginContext localContext)
        {
            var service = localContext.OrganizationService;

            QueryExpression projectQuery = new QueryExpression(elca_Project.EntityLogicalName);
            projectQuery.ColumnSet = new ColumnSet(elca_Project.Fields.elca_Members);
            projectQuery.Criteria.AddCondition(elca_Project.Fields.elca_ProjectId, ConditionOperator.Equal, project.Id);
            
            Entity projectEntity = service.RetrieveMultiple(projectQuery).Entities.FirstOrDefault();
            
            if (projectEntity != null && projectEntity.Contains("elca_members"))
            {
                string listOfMembersVisa = projectEntity.GetAttributeValue<string>("elca_members");
            
                if (!String.IsNullOrEmpty(listOfMembersVisa))
                {
                    var visaList = listOfMembersVisa.Split(',').Select(visa => visa.Trim());
                    QueryExpression contactQuery = new QueryExpression(Contact.EntityLogicalName);
                    contactQuery.ColumnSet = new ColumnSet(Contact.Fields.Id);
                    contactQuery.Criteria.AddCondition(new ConditionExpression(Contact.Fields.elca_Visa, ConditionOperator.In, visaList.ToArray()));
            
                    DataCollection<Entity> contacts = service.RetrieveMultiple(contactQuery).Entities;
                    EntityReferenceCollection validContacts = new EntityReferenceCollection();
            
                    foreach (Entity contact in contacts)
                    {
                        validContacts.Add(contact.ToEntityReference());
                    }
                    return validContacts;
                }
            }
            return new EntityReferenceCollection();
        }
        private EntityReferenceCollection getAssociatedRelations(EntityReference project, LocalPluginContext localContext)
        {
            var service = localContext.OrganizationService;

            QueryExpression query = new QueryExpression(Contact.EntityLogicalName);
            query.ColumnSet = new ColumnSet(Contact.Fields.Id);
            query.AddLink(elca_Project.Relationships.elca_project_contact, Contact.Fields.Id, Contact.Fields.Id)
                .LinkCriteria.AddCondition(elca_Project.Fields.Id, ConditionOperator.Equal, project.Id);

            EntityCollection result = service.RetrieveMultiple(query);
            EntityReferenceCollection associatedRelations = new EntityReferenceCollection();

            foreach (Entity entity in result.Entities)
            {
                EntityReference contactRef = entity.ToEntityReference();
                associatedRelations.Add(contactRef);
            }
            return associatedRelations;
        }
    }
}

