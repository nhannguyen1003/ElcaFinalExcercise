
// <copyright file="PreValidateElcaProjectEntityDelete.cs" company="">
// Copyright (c) 2023 All Rights Reserved
// </copyright>
// <author></author>
// <date>7/7/2023 1:17:01 PM</date>
// <summary>Implements the PreValidateElcaProjectEntityDelete Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk.Client;
using ElcaPIMTool.ElcaPIMTool.Common.CrmEarlyBound;


namespace ElcaPIMTool.ElcaPIMTool.Plugins
{

    /// <summary>
    /// PreValidateElcaProjectEntityDelete Plugin.
    /// </summary>    
    public class PreValidateElcaProjectEntityDelete : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreValidateElcaProjectEntityDelete"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreValidateElcaProjectEntityDelete(string unsecure, string secure)
            : base(typeof(PreValidateElcaProjectEntityDelete))
        {

            // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }
            try
            {
                var pluginExecutionContext = localContext.PluginExecutionContext;
                if (pluginExecutionContext.InputParameters.Contains("Target")
                    && pluginExecutionContext.InputParameters["Target"] is EntityReference)
                {
                    IOrganizationService orgService = localContext.OrganizationService;
                    EntityReference projectRef = pluginExecutionContext.InputParameters["Target"] as EntityReference;
                    elca_Project project = orgService.Retrieve(projectRef.LogicalName, projectRef.Id, new ColumnSet(elca_Project.Fields.elca_ProjectStatus)) as elca_Project;

                        var statusCode = project.elca_ProjectStatus;
                        if (statusCode != elca_ProjectStatus.New)
                        {
                            throw new InvalidPluginExecutionException("You can only delete new project");
                        }
                    }

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}
