
// <copyright file="PostUpdateProjectRelationshipPlugin.cs" company="">
// Copyright (c) 2023 All Rights Reserved
// </copyright>
// <author></author>
// <date>7/20/2023 2:31:34 PM</date>
// <summary>Implements the PostUpdateProjectRelationshipPlugin Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using Microsoft.Xrm.Tooling.Connector;
using System.Configuration;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk.Client;
using ElcaPIMTool.Common.CrmEarlyBound;
using System.Linq;
using System.ServiceModel;
using System.Collections.Generic;

namespace ElcaPIMTool.Plugins
{

    /// <summary>
    /// PostUpdateProjectRelationshipPlugin Plugin.
    /// </summary>    
    public class PostUpdateProjectRelationshipPlugin: PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostUpdateProjectRelationshipPlugin"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PostUpdateProjectRelationshipPlugin(string unsecure, string secure)
            : base(typeof(PostUpdateProjectRelationshipPlugin))
        {
            
           // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            var pluginExecutionContext = localContext.PluginExecutionContext;
            IOrganizationService orgService = localContext.OrganizationService;

            elca_Project project ;
            if (pluginExecutionContext.InputParameters.Contains("Target")
                        && pluginExecutionContext.InputParameters["Target"] is EntityReference)
            {
                EntityReference projectRef = pluginExecutionContext.InputParameters["Target"] as EntityReference;
                project = orgService.Retrieve(projectRef.LogicalName, projectRef.Id, new ColumnSet(elca_Project.Fields.elca_Members)) as elca_Project;


                if (pluginExecutionContext.InputParameters.Contains("RelatedEntities")
                && pluginExecutionContext.InputParameters["RelatedEntities"] is EntityReferenceCollection)
                {
                    EntityReferenceCollection relatedEntityCol = pluginExecutionContext.InputParameters["RelatedEntities"] as EntityReferenceCollection;

                    List<String> listOfRelatedEntitiesVisa = new List<string>();
                    foreach (EntityReference entity in relatedEntityCol)
                    {
                        Contact employee = orgService.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(Contact.Fields.elca_Visa)) as Contact;
                        listOfRelatedEntitiesVisa.Add(employee.elca_Visa);
                    }
                    string updateVisa = "";
                    if (pluginExecutionContext.MessageName.ToLower() == "associate")
                    {
                        if (listOfRelatedEntitiesVisa.Count > 0)
                        {
                            IEnumerable<String> projectMembers = new List<string>();
                            if (!String.IsNullOrEmpty(project.elca_Members))
                            { 
                                projectMembers = project.elca_Members.Split(',').Select(visa => visa.Trim()); 
                            }
                            List<String> updateData = new List<String>();
                            foreach (String visa in projectMembers)
                            {
                                updateData.Add(visa);
                            }
                            foreach (String visa in listOfRelatedEntitiesVisa)
                            {
                                if (!projectMembers.Contains(visa))
                                {
                                    updateData.Add(visa);
                                }
                            }
                            updateVisa = String.Join(", ", updateData);
                            project.elca_Members = updateVisa;
                        }
                    }
                    else {
                        if (listOfRelatedEntitiesVisa.Count > 0)
                        {
                            IEnumerable<String> projectMembers = new List<string>();
                            if (!String.IsNullOrEmpty(project.elca_Members))
                            {
                                projectMembers = project.elca_Members.Split(',').Select(visa => visa.Trim());
                            }
                            List<String> updateData = new List<String>();
                            foreach (String visa in projectMembers)
                            {
                                if (!listOfRelatedEntitiesVisa.Contains(visa))
                                {
                                        updateData.Add(visa);
                                }
                            }
                        
                            updateVisa = String.Join(", ", updateData);
                            project.elca_Members = updateVisa;
                        }
                    }
                        orgService.Update(project);
                }
            }
        }

    }
}
